# -*- coding: utf-8 -*-
"""Ai  cá»§a Colab Viemphoi

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ii4ONVus9gdZAPPl7JEnX3iZKpzt72Wx
"""

from google.colab import drive
drive.mount('/content/gdrive')

import torch, torchvision
from torchvision import datasets, models, transforms
import torch.nn as nn
import torch.optim as optim
from torch.utils.data import DataLoader
import time
from torchsummary import summary

import numpy as np
import matplotlib.pyplot as plt
import os,random

from PIL import Image,ImageOps,ImageFilter

image_transforms = { 
    'train': transforms.Compose([
        transforms.RandomResizedCrop(size=256, scale=(0.8, 1.0)),
        transforms.RandomRotation(degrees=15),
        transforms.RandomHorizontalFlip(),
        transforms.CenterCrop(size=224),
        transforms.ToTensor(),
        
        transforms.Normalize([0.485, 0.456, 0.406],
                             [0.229, 0.224, 0.225])
    ]),
    'valid': transforms.Compose([
        transforms.Resize(size=256),
        transforms.CenterCrop(size=224),
        transforms.ToTensor(),
        transforms.Normalize([0.485, 0.456, 0.406],
                             [0.229, 0.224, 0.225])
    ]),
    'test': transforms.Compose([
        transforms.Resize(size=256),
        transforms.CenterCrop(size=224),
        transforms.ToTensor(),
        transforms.Normalize([0.485, 0.456, 0.406],
                             [0.229, 0.224, 0.225])
    ])
}

# Load the Data

# Set train and valid directory paths

dataset = 'COVID-19'

train_directory ="/content/gdrive/MyDrive/COVID-19/Train"
valid_directory ="/content/gdrive/MyDrive/COVID-19/Valid"
test_directory ="/content/gdrive/MyDrive/COVID-19/Test"


# Number of classes
num_classes = len(os.listdir(valid_directory))  #10#2#257
print(num_classes)

# Load Data from folders
data = {
    'train': datasets.ImageFolder(root=train_directory,  transform=image_transforms['train']),
    'valid': datasets.ImageFolder(root=valid_directory, transform=image_transforms['valid']),
    'test': datasets.ImageFolder(root=test_directory, transform=image_transforms['test'])
}

# Get a mapping of the indices to the class names, in order to see the output classes of the test images.
idx_to_class = {v: k for k, v in data['train'].class_to_idx.items()}
print(idx_to_class)
# Size of Data, to be used for calculating Average Loss and Accuracy
train_data_size = len(data['train'])
valid_data_size = len(data['valid'])
test_data_size = len(data['test'])

# Create iterators for the Data loaded using DataLoader module
train_data_loader = DataLoader(data['train'], batch_size=32, shuffle=True)
valid_data_loader = DataLoader(data['valid'], batch_size=32, shuffle=True)
test_data_loader = DataLoader(data['test'], batch_size=32, shuffle=True)

print(train_data_size,test_data_size,valid_data_size)

train_co = '/content/gdrive/MyDrive/COVID-19/Train/Normal'
num_train_normal = len(os.listdir(train_co))
print(num_train_normal)

# Load pretrained ResNet50 Model
resnet50 = models.resnet50(pretrained=True)

# Freeze model parameters
for param in resnet50.parameters():
    param.requires_grad = False

# Change the final layer of ResNet50 Model for Transfer Learning
fc_inputs = resnet50.fc.in_features
resnet50.fc = nn.Sequential(
    nn.Linear(fc_inputs, 256),
    nn.ReLU(),
    nn.Dropout(0.4),
    nn.Linear(256, num_classes), 
    nn.LogSoftmax(dim=1) # For using NLLLoss()
)

# Define Optimizer and Loss Function
loss_func = nn.NLLLoss()
optimizer = optim.Adam(resnet50.parameters(),lr = 0.0001)

resnet50 = resnet50.to('cuda:0')

summary(resnet50, (3, 224, 224))

device = torch.device("cuda:0" if torch.cuda.is_available() else "cpu")
print(device)

def train_and_validate(model, loss_criterion, optimizer, epochs):
    '''
    Function to train and validate
    Parameters
        :param model: Model to train and validate
        :param loss_criterion: Loss Criterion to minimize
        :param optimizer: Optimizer for computing gradients
        :param epochs: Number of epochs (default=25)
  
    Returns
        model: Trained Model with best validation accuracy
        history: (dict object): Having training loss, accuracy and validation loss, accuracy
    '''
    
    start = time.time()
    history = []
    best_acc = 0.0

    for epoch in range(epochs):
        epoch_start = time.time()
        print("Epoch: {}/{}".format(epoch+1, epochs))
        
        # Set to training mode
        model.train()
        
        # Loss and Accuracy within the epoch
        train_loss = 0.0
        train_acc = 0.0
        
        valid_loss = 0.0
        valid_acc = 0.0
        
        for i, (inputs, labels) in enumerate(train_data_loader):

            inputs = inputs.to(device)
            labels = labels.to(device)
            
            # Clean existing gradients
            optimizer.zero_grad()
            
            # Forward pass - compute outputs on input data using the model
            outputs = model(inputs)
            
            # Compute loss
            loss = loss_criterion(outputs, labels)
            
            # Backpropagate the gradients
            loss.backward()
            
            # Update the parameters
            optimizer.step()
            
            # Compute the total loss for the batch and add it to train_loss
            train_loss += loss.item() * inputs.size(0)
            
            # Compute the accuracy
            ret, predictions = torch.max(outputs.data, 1)
            correct_counts = predictions.eq(labels.data.view_as(predictions))
            
            # Convert correct_counts to float and then compute the mean
            acc = torch.mean(correct_counts.type(torch.FloatTensor))
            
            # Compute total accuracy in the whole batch and add to train_acc
            train_acc += acc.item() * inputs.size(0)
            
            #print("Batch number: {:03d}, Training: Loss: {:.4f}, Accuracy: {:.4f}".format(i, loss.item(), acc.item()))

            
        # Validation - No gradient tracking needed
        with torch.no_grad():

            # Set to evaluation mode
            model.eval()

            # Validation loop
            for j, (inputs, labels) in enumerate(valid_data_loader):
                inputs = inputs.to(device)
                labels = labels.to(device)

                # Forward pass - compute outputs on input data using the model
                outputs = model(inputs)

                # Compute loss
                loss = loss_criterion(outputs, labels)

                # Compute the total loss for the batch and add it to valid_loss
                valid_loss += loss.item() * inputs.size(0)

                # Calculate validation accuracy
                ret, predictions = torch.max(outputs.data, 1)
                correct_counts = predictions.eq(labels.data.view_as(predictions))

                # Convert correct_counts to float and then compute the mean
                acc = torch.mean(correct_counts.type(torch.FloatTensor))

                # Compute total accuracy in the whole batch and add to valid_acc
                valid_acc += acc.item() * inputs.size(0)

                #print("Validation Batch number: {:03d}, Validation: Loss: {:.4f}, Accuracy: {:.4f}".format(j, loss.item(), acc.item()))
            
        # Find average training loss and training accuracy
        avg_train_loss = train_loss/train_data_size 
        avg_train_acc = train_acc/train_data_size

        # Find average training loss and training accuracy
        avg_valid_loss = valid_loss/valid_data_size 
        avg_valid_acc = valid_acc/valid_data_size

        history.append([avg_train_loss, avg_valid_loss, avg_train_acc, avg_valid_acc])
                
        epoch_end = time.time()
    
        print("Epoch : {:03d}, Training: Loss: {:.4f}, Accuracy: {:.4f}%, \n\t\tValidation : Loss : {:.4f}, Accuracy: {:.4f}%, Time: {:.4f}s".format(epoch+1, avg_train_loss, avg_train_acc*100, avg_valid_loss, avg_valid_acc*100, epoch_end-epoch_start))
        
        # Save if the model has best accuracy till now
        #torch.save(model, dataset+'_model_'+str(epoch)+'.pt')
        
            
    return model, history

# Commented out IPython magic to ensure Python compatibility.
num_epochs = 50
trained_model, history = train_and_validate(resnet50, loss_func, optimizer, num_epochs)

# %cd /content/gdrive/MyDrive/COVID-19/Result/viemphoi
FILE = "weight0.pth"
torch.save(trained_model,FILE)
torch.save(history, dataset+'_history_0.pt')

# Commented out IPython magic to ensure Python compatibility.
# %cd /content/gdrive/MyDrive/COVID-19/Result/viemphoi

history = np.array(history)
plt.plot(history[:,0:2])
plt.legend(['Tr Loss', 'Val Loss'])
plt.xlabel('Epoch Number')
plt.ylabel('Loss')
plt.ylim(0,1)
plt.savefig(dataset+'_loss_curve_1.png')
plt.show()

plt.plot(history[:,2:4])
plt.legend(['Tr Accuracy', 'Val Accuracy'])
plt.xlabel('Epoch Number')
plt.ylabel('Accuracy')
plt.ylim(0,1)
plt.savefig(dataset+'_acc_curve_1.png')
plt.show()

def predict(model, test_image_name):
    transform = image_transforms['test']
    test_image = Image.open(test_image_name).convert('RGB')
    plt.imshow(test_image)
    test_image_tensor = transform(test_image)
    if torch.cuda.is_available():
        test_image_tensor = test_image_tensor.view(1, 3, 224, 224).cuda()
    else:
        test_image_tensor = test_image_tensor.view(1, 3, 224, 224)
    with torch.no_grad():
        model.eval()
        # Model outputs log probabilities
        out = model(test_image_tensor)
        preds = torch.topk(out, k=2).indices.squeeze(0).tolist()

        print("-----")
        for idx in preds:
          label = idx_to_class[idx]

          #print(idx)
          prob = torch.softmax(out, dim=1)[0, idx].item()
          print(f"{label:<75} ({prob * 100:.2f}%)")

model = torch.load('/content/gdrive/MyDrive/COVID-19/Result/viemphoi/weight0.pth')
model.eval()

predict(model,'/content/gdrive/MyDrive/COVID-19/Test/VieÌm phoÌÌi/Viral Pneumonia-797.png')

nb_classes = 2

confusion_matrix = torch.zeros(nb_classes, nb_classes)
with torch.no_grad():
    for i, (inputs, classes) in enumerate(test_data_loader):
        inputs = inputs.to(device)
        classes = classes.to(device)
        outputs = model(inputs)
        _, preds = torch.max(outputs, 1)
        for t, p in zip(classes.view(-1), preds.view(-1)):
                confusion_matrix[t.long(), p.long()] += 1

print(confusion_matrix)

# convert tensor to numpy
cfn_matrix = confusion_matrix.numpy()
print(cfn_matrix)

import matplotlib.pyplot as plt
import itertools
def plot_confusion_matrix(cm, classes,
                          normalize=False,
                          title='Confusion matrix',
                          cmap=plt.cm.Blues):
    """
    This function prints and plots the confusion matrix.
    Normalization can be applied by setting `normalize=True`.
    """
    if normalize:
        cm = cm.astype('float') / cm.sum(axis=1, keepdims = True)

    plt.imshow(cm, interpolation='nearest', cmap=cmap)
    plt.title(title)
    plt.colorbar()
    tick_marks = np.arange(len(classes))
    plt.xticks(tick_marks, classes, rotation=45)
    plt.yticks(tick_marks, classes)

    fmt = '.2f' if normalize else '.2f'
    thresh = cm.max() / 2.
    for i, j in itertools.product(range(cm.shape[0]), range(cm.shape[1])):
        plt.text(j, i, format(cm[i, j], fmt),
                 horizontalalignment="center",
                 color="white" if cm[i, j] > thresh else "black")

    plt.tight_layout()
    plt.ylabel('True label')
    plt.xlabel('Predicted label')

# Plot non-normalized confusion matrix
class_names = ['BÃ¬nh thÆ°á»ng', 'ViÃªm phá»i']
plt.figure()
plot_confusion_matrix(cfn_matrix, classes=class_names,
                      title='Confusion matrix, without normalization')

# Plot normalized confusion matrix
plt.figure()
plot_confusion_matrix(cfn_matrix, classes=class_names, normalize=True,
                      title='Normalized confusion matrix')

plt.show()

# from confusion matrix, we can get tp,fp,fn for each class
tp1,fp1,fn1,tn1 = cfn_matrix[0][0],cfn_matrix[1][0],cfn_matrix[0][1], cfn_matrix[1][1]
tp2,fp2,fn2,tn2 = cfn_matrix[1][1],cfn_matrix[0][1],cfn_matrix[1][0], cfn_matrix[0][0]
#tp3,fp3,fn3,tn3 = cfn_matrix[2][2],cfn_matrix[0][2]+cfn_matrix[1][2],cfn_matrix[2][0]+cfn_matrix[2][1], cfn_matrix[0][0]+cfn_matrix[0][1]+cfn_matrix[1][0]+cfn_matrix[1][1]
print(tp1,fp1,fn1,tn1) 
print(tp2,fp2,fn2,tn2)  
#print(tp3,fp3,fn3,tn3)

# Calculate tp,fp,fn,tn
total_tp = tp1 + tp2 
total_fp = fp1 + fp2 
total_fn = fn1 + fn2 
total_tn = tn1 + tn2 
print(total_tp, total_fp, total_fn, total_tn)

# Calculate micro_average of precision and recall
micro_ap = float(total_tp)/(total_tp + total_fp)
micro_ar = float(total_tp)/(total_tp + total_fn)
print('(precision, recall) = (%.2f, %.2f)' % (micro_ap, micro_ar))

# Specificity
SP = float(total_tp)/(total_tp + total_fp)
print(SP)

F1_score = 2*float(micro_ap * micro_ar )/(micro_ap + micro_ar)
print(F1_score)

Acc = (total_tp + total_tn)/(total_tp + total_fp + total_tn+total_fn)
print("Accuracy: %f"%(Acc))